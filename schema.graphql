type ERC20Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # 发行量
  totalSupply: BigInt
}
# 客户端配置文件读取
type ConfigAddress @entity {
  # factory address
  id: ID!

  # 配置文件合约地址
  configAddress: Bytes!

  # 工厂合约地址
  factoryAddress: Bytes!

  # 投票合约地址
  voteAddress: Bytes!

  # 投票合约地址
  stakingAddress: Bytes!

  # NFT合约地址
  playNFTAddress: Bytes!

  # 保证金合约地址
  ndlToken: ERC20Token!

  # WETH合约地址
  wethToken: ERC20Token!

  # USDT合约地址
  usdtToken: ERC20Token!

  # 区块浏览器地址
  rpcUrl: String!

  # 区块浏览器地址
  blockUrl: String!

  # 网络名称
  networkName: String!

  # chain_id
  chainId: BigInt!

  # 时间戳
  timestamp: BigInt!

  # 其他用来游戏的代币也可以随时配置添加
  gameTokens: [ERC20Token!]!
}

# 用户信息
type UserInfo @entity {
  id: ID!
}

# 游戏列表
type Game @entity {
  id: ID!

  title: String! # 标题
  locked: BigInt! # 是否解锁状态
}

# 选项信息
type OptionInfo @entity {
  id: ID!
  marketNumber: BigInt!
  placeNumber: BigInt!
  frozenNumber: BigInt!
  game: GameInfo! # 所属游戏
}

# 游戏列表
type GameInfo @entity {
  id: ID!

  _token: ERC20Token! # 游戏代币币种
  _owner: Bytes! # 用户地址
  _game: Game! # 游戏合约地址
  _gameName: String! # 标题
  _shortGameName: String! # 标题
  _optionName: [String!]! # 选项名称
  _optionNum: [BigInt!]! # 选项数据
  _resultSource: String! # 结果网址
  _endSec: BigInt! # 游戏结束时间戳，也就是结束时间到了才可输入结果
  _openAddress: Bytes # 开奖者地址
  _winOption: BigInt # 获胜选项
  timestamp: BigInt! #  下注时间
  vote: VoteInfo! @derivedFrom(field: "game") # 投票地址
  betInfos: [BetInfo!]! @derivedFrom(field: "game") # 下注记录
  nftInfos: [NFTInfo!]! @derivedFrom(field: "game") # 下注记录
  _optionInfos: [OptionInfo!]! @derivedFrom(field: "game") # 选项列表
  gameUserInfos: [GameUserInfo!]! @derivedFrom(field: "game") # 用户列表
}

# 游戏用户信息
type GameUserInfo @entity {
  id: ID!

  sender: Bytes! # 用户地址
  game: GameInfo! # 所属游戏
  finishReward: BigInt # 是否已领奖,非空表示已领
  timestamp: BigInt! #  更新时间
}

# nft列表
type NFTInfo @entity {
  id: ID!

  tokenId: BigInt! # token地址
  owner: Bytes! # 用户地址
  game: GameInfo! # 所属游戏
}

# 下注记录
type BetInfo @entity {
  id: ID!

  sender: Bytes! # 用户地址
  token: ERC20Token! # 代币合约地址
  game: GameInfo! # 所属游戏
  options: [Int!]! # 选项数据
  optionNum: [BigInt!]! # 选项数据
  tokenIds: [BigInt!]! # 选项数据
  timestamp: BigInt! #  下注时间
}

# 投票信息
type VoteInfo @entity {
  id: ID! #game地址作为key
  vote: Bytes! # 投票合约地址
  owner: Bytes! # 发起者地址
  game: GameInfo! # 所属游戏
  winOption: BigInt! # 同意选项
  option: BigInt! # 同意选项
  agreeNum: Int! # 同意数
  disAgreeNum: Int! # 不同意数
  voteNumbers: [BigInt!] # 投票结果列表
  endTime: BigInt! #  投票结束时间
  timestamp: BigInt! #  下注时间
  voteUserInfos: [VoteUserInfo!]! @derivedFrom(field: "vote") # 下注记录
}

# 投票明细
type VoteUserInfo @entity {
  id: ID!

  sender: Bytes! # 投票者地址
  vote: VoteInfo! # 所属游戏
  option: Int! # 投票选项
  timestamp: BigInt! #  下注时间
}

type Token @entity {
  id: ID!
  tokenBalances: [TokenBalance!]! @derivedFrom(field: "token")
}

type TokenBalance @entity {
  id: ID!
  amount: Int!
  token: Token!
}

# 质押信息
type NoodleStaking @entity {
  # Contract address
  id: ID!

  owner: Bytes!

  noodle: ERC20Token!
  noodlePerSecond: BigInt! #每区块总产出
  totalAllocLpToken: BigInt! #总质押lp数量
  harvestAll: BigInt! #已提取总收益
  stakeInfos: [StakeInfo!]! @derivedFrom(field: "noodleStaking")
  stakeCount: BigInt! #总池子数量
  timestamp: BigInt!
  block: BigInt!
}

# 挖矿池子
type StakeInfo @entity {
  # lpToken Address
  id: ID!
  noodleStaking: NoodleStaking! #质押合约
  lpToken: GameInfo!

  noodlePerBlock: BigInt! #每区块奖励
  totalAllocLpToken: BigInt! #总质押lp数量
  lastRewardBlock: BigInt! #最新奖励区块
  accNoodlePerShare: BigInt! #当前每份额收益基数
  harvestAll: BigInt! #已提取总收益
  users: [StakeUser!]! @derivedFrom(field: "stakeInfo")
  userCount: BigInt!

  timestamp: BigInt!
  block: BigInt!
}

# 质押用户信息
type StakeUser @entity {
  id: ID! #组合key
  owner: Bytes! #用户地址
  stakeInfo: StakeInfo

  amount: BigInt! #提供的lpToken的数量
  rewardDebt: BigInt! #收益起始点
  harvestAll: BigInt! #已提取总收益
  noodleHarvested: BigInt! #已收益noodle数量
  depositInfos: [DepositInfo!]! @derivedFrom(field: "user") #存入历史
  withdrawInfos: [WithdrawInfo!]! @derivedFrom(field: "user") #取出历史
  timestamp: BigInt!
  block: BigInt!
}

# 存入操作历史
type DepositInfo @entity {
  id: ID! #组合key
  user: StakeUser! #用户
  lpToken: Bytes!
  amount: BigInt! #存入的lpToken的数量
  timestamp: BigInt!
  block: BigInt!
}

# 取出操作历史
type WithdrawInfo @entity {
  id: ID! #组合key
  user: StakeUser! #用户
  lpToken: Bytes!
  amount: BigInt! #取出的lpToken的数量
  timestamp: BigInt!
  block: BigInt!
}
